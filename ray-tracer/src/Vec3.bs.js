// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function make(x, y, z) {
  return {
          x: x,
          y: y,
          z: z
        };
}

function add(vec1, vec2) {
  return {
          x: vec1.x + vec2.x,
          y: vec1.y + vec2.y,
          z: vec1.z + vec2.z
        };
}

function sub(vec1, vec2) {
  return {
          x: vec1.x - vec2.x,
          y: vec1.y - vec2.y,
          z: vec1.z - vec2.z
        };
}

function div(vec, f) {
  return {
          x: vec.x / f,
          y: vec.y / f,
          z: vec.z / f
        };
}

function mul(vec, f) {
  return {
          x: vec.x * f,
          y: vec.y * f,
          z: vec.z * f
        };
}

function mulVector(vec1, vec2) {
  return {
          x: vec1.x * vec2.x,
          y: vec1.y * vec2.y,
          z: vec1.z * vec2.z
        };
}

function dot(vec1, vec2) {
  return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z;
}

function cross(vec1, vec2) {
  return {
          x: vec1.y * vec2.z - vec2.y * vec1.z,
          y: vec1.z * vec2.x - vec2.z * vec1.x,
          z: vec1.x * vec2.y - vec2.x * vec1.y
        };
}

function length(vec) {
  return Math.sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);
}

function squaredLength(vec) {
  return vec.x * vec.x + vec.y * vec.y + vec.z * vec.z;
}

function unitVector(vec) {
  return div(vec, length(vec));
}

exports.make = make;
exports.add = add;
exports.sub = sub;
exports.div = div;
exports.mul = mul;
exports.mulVector = mulVector;
exports.dot = dot;
exports.cross = cross;
exports.length = length;
exports.squaredLength = squaredLength;
exports.unitVector = unitVector;
/* No side effect */
