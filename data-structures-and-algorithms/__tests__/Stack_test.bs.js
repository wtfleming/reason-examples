// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var Stack$ReasonExamples = require("../src/data-structures/Stack.bs.js");

Jest.describe("make", (function (param) {
        return Jest.test("toBe", (function (param) {
                      return Jest.Expect.toBe(/* [] */0, Jest.Expect.expect(Stack$ReasonExamples.make(undefined)));
                    }));
      }));

Jest.describe("push and peek", (function (param) {
        return Jest.test("push and peek", (function (param) {
                      return Jest.Expect.toEqual(3, Jest.Expect.expect(Stack$ReasonExamples.peek(Stack$ReasonExamples.push(3, Stack$ReasonExamples.push(2, Stack$ReasonExamples.make(undefined))))));
                    }));
      }));

Jest.describe("pop", (function (param) {
        return Jest.test("pop", (function (param) {
                      var match = Stack$ReasonExamples.pop(Stack$ReasonExamples.push(3, Stack$ReasonExamples.push(2, Stack$ReasonExamples.make(undefined))));
                      return Jest.Expect.toEqual(3, Jest.Expect.expect(match[0]));
                    }));
      }));

Jest.describe("is_empty", (function (param) {
        return Jest.test("returns true if empty", (function (param) {
                      return Jest.Expect.toBe(true, Jest.Expect.expect(Stack$ReasonExamples.is_empty(Stack$ReasonExamples.make(undefined))));
                    }));
      }));

Jest.describe("is_empty", (function (param) {
        return Jest.test("returns true if not empty", (function (param) {
                      return Jest.Expect.toBe(false, Jest.Expect.expect(Stack$ReasonExamples.is_empty(Stack$ReasonExamples.push(55, Stack$ReasonExamples.make(undefined)))));
                    }));
      }));

var a = "";

exports.a = a;
/*  Not a pure module */
