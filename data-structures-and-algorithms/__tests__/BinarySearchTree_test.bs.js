// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var BinarySearchTree$ReasonExamples = require("../src/data-structures/BinarySearchTree.bs.js");

Jest.describe("make", (function (param) {
        return Jest.test("make", (function (param) {
                      return Jest.Expect.toEqual(/* Node */{
                                  _0: 5,
                                  _1: /* Leaf */0,
                                  _2: /* Leaf */0
                                }, Jest.Expect.expect(BinarySearchTree$ReasonExamples.make(5)));
                    }));
      }));

Jest.describe("make_empty", (function (param) {
        return Jest.test("make_empty", (function (param) {
                      return Jest.Expect.toBe(/* Leaf */0, Jest.Expect.expect(BinarySearchTree$ReasonExamples.make_empty(undefined)));
                    }));
      }));

Jest.describe("insert", (function (param) {
        return Jest.test("insert", (function (param) {
                      return Jest.Expect.toEqual(/* Node */{
                                  _0: 5,
                                  _1: /* Leaf */0,
                                  _2: /* Leaf */0
                                }, Jest.Expect.expect(BinarySearchTree$ReasonExamples.insert(5, BinarySearchTree$ReasonExamples.make_empty(undefined))));
                    }));
      }));

Jest.describe("mem", (function (param) {
        var tree = BinarySearchTree$ReasonExamples.tree_of_array([
              5,
              6,
              2,
              1,
              3
            ]);
        Jest.test("returns true if value is a member", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(BinarySearchTree$ReasonExamples.mem(5, tree)));
              }));
        Jest.test("returns true if value is a member", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(BinarySearchTree$ReasonExamples.mem(6, tree)));
              }));
        Jest.test("returns true if value is a member", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(BinarySearchTree$ReasonExamples.mem(2, tree)));
              }));
        Jest.test("returns true if value is a member", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(BinarySearchTree$ReasonExamples.mem(1, tree)));
              }));
        Jest.test("returns true if value is a member", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(BinarySearchTree$ReasonExamples.mem(3, tree)));
              }));
        Jest.test("returns false if value is not a member", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(BinarySearchTree$ReasonExamples.mem(0, tree)));
              }));
        Jest.test("returns false if value is not a member", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(BinarySearchTree$ReasonExamples.mem(4, tree)));
              }));
        return Jest.test("returns false if value is not a member", (function (param) {
                      return Jest.Expect.toBe(false, Jest.Expect.expect(BinarySearchTree$ReasonExamples.mem(11, tree)));
                    }));
      }));

Jest.describe("sum", (function (param) {
        Jest.test("returns the sum of integers", (function (param) {
                return Jest.Expect.toBe(36, Jest.Expect.expect(BinarySearchTree$ReasonExamples.sum(BinarySearchTree$ReasonExamples.tree_of_array([
                                        7,
                                        15,
                                        3,
                                        1,
                                        10
                                      ]))));
              }));
        return Jest.test("returns the sum of integers", (function (param) {
                      return Jest.Expect.toBe(0, Jest.Expect.expect(BinarySearchTree$ReasonExamples.sum(BinarySearchTree$ReasonExamples.tree_of_array([]))));
                    }));
      }));

Jest.describe("height", (function (param) {
        Jest.test("returns 0 for an empty tree", (function (param) {
                return Jest.Expect.toBe(0, Jest.Expect.expect(BinarySearchTree$ReasonExamples.height(BinarySearchTree$ReasonExamples.tree_of_array([]))));
              }));
        return Jest.test("returns the height", (function (param) {
                      return Jest.Expect.toBe(3, Jest.Expect.expect(BinarySearchTree$ReasonExamples.height(BinarySearchTree$ReasonExamples.tree_of_array([
                                              7,
                                              15,
                                              16,
                                              1,
                                              10
                                            ]))));
                    }));
      }));

Jest.describe("size", (function (param) {
        Jest.test("returns 0 for an empty tree", (function (param) {
                return Jest.Expect.toBe(0, Jest.Expect.expect(BinarySearchTree$ReasonExamples.size(BinarySearchTree$ReasonExamples.tree_of_array([]))));
              }));
        Jest.test("returns the size", (function (param) {
                return Jest.Expect.toBe(5, Jest.Expect.expect(BinarySearchTree$ReasonExamples.size(BinarySearchTree$ReasonExamples.tree_of_array([
                                        5,
                                        6,
                                        2,
                                        1,
                                        3
                                      ]))));
              }));
        return Jest.test("returns the size", (function (param) {
                      return Jest.Expect.toBe(1, Jest.Expect.expect(BinarySearchTree$ReasonExamples.size(BinarySearchTree$ReasonExamples.tree_of_array([55]))));
                    }));
      }));

Jest.describe("min", (function (param) {
        Jest.test("returns 0 for an empty tree", (function (param) {
                return Jest.Expect.toBe(1, Jest.Expect.expect(BinarySearchTree$ReasonExamples.min(BinarySearchTree$ReasonExamples.tree_of_array([
                                        5,
                                        6,
                                        2,
                                        1,
                                        3
                                      ]))));
              }));
        return Jest.test("returns the size", (function (param) {
                      return Jest.Expect.toBe(55, Jest.Expect.expect(BinarySearchTree$ReasonExamples.min(BinarySearchTree$ReasonExamples.tree_of_array([55]))));
                    }));
      }));

var a = "";

exports.a = a;
/*  Not a pure module */
