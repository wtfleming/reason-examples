// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");

function make_empty(param) {
  return /* Leaf */0;
}

function make(x) {
  return /* Node */{
          _0: x,
          _1: /* Leaf */0,
          _2: /* Leaf */0
        };
}

function insert(x, tree) {
  if (!tree) {
    return /* Node */{
            _0: x,
            _1: /* Leaf */0,
            _2: /* Leaf */0
          };
  }
  var right = tree._2;
  var left = tree._1;
  var k = tree._0;
  if (Caml_obj.caml_lessthan(x, k)) {
    return /* Node */{
            _0: k,
            _1: insert(x, left),
            _2: right
          };
  } else if (Caml_obj.caml_greaterthan(x, k)) {
    return /* Node */{
            _0: k,
            _1: left,
            _2: insert(x, right)
          };
  } else {
    return /* Node */{
            _0: x,
            _1: /* Leaf */0,
            _2: /* Leaf */0
          };
  }
}

function create_a_tree_example(param) {
  var tree = insert(1, insert(7, insert(6, /* Node */{
                _0: 5,
                _1: /* Leaf */0,
                _2: /* Leaf */0
              })));
  console.log(tree);
  
}

function tree_of_array(arr) {
  var _acc = /* Leaf */0;
  var _x = $$Array.to_list(arr);
  while(true) {
    var x = _x;
    var acc = _acc;
    if (!x) {
      return acc;
    }
    _x = x.tl;
    _acc = insert(x.hd, acc);
    continue ;
  };
}

function mem(x, _tree) {
  while(true) {
    var tree = _tree;
    if (!tree) {
      return false;
    }
    if (Caml_obj.caml_equal(x, tree._0)) {
      return true;
    }
    if (mem(x, tree._1)) {
      return true;
    }
    _tree = tree._2;
    continue ;
  };
}

function sum(tree) {
  if (tree) {
    return (tree._0 + sum(tree._1) | 0) + sum(tree._2) | 0;
  } else {
    return 0;
  }
}

function max(x, y) {
  if (Caml_obj.caml_greaterthan(x, y)) {
    return x;
  } else {
    return y;
  }
}

function height(tree) {
  if (tree) {
    return 1 + max(height(tree._1), height(tree._2)) | 0;
  } else {
    return 0;
  }
}

function size(tree) {
  if (tree) {
    return (1 + size(tree._1) | 0) + size(tree._2) | 0;
  } else {
    return 0;
  }
}

function min(tree) {
  var _acc = 0;
  var _t = tree;
  while(true) {
    var t = _t;
    var acc = _acc;
    if (!t) {
      return acc;
    }
    _t = t._1;
    _acc = t._0;
    continue ;
  };
}

exports.make_empty = make_empty;
exports.make = make;
exports.insert = insert;
exports.create_a_tree_example = create_a_tree_example;
exports.tree_of_array = tree_of_array;
exports.mem = mem;
exports.sum = sum;
exports.max = max;
exports.height = height;
exports.size = size;
exports.min = min;
/* No side effect */
