// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Js_math = require("bs-platform/lib/js/js_math.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

var $$Window = {};

var $$Document = {};

function loadFromSrc(imageSrc) {
  var imageEl = new Image();
  var loadImagePromise = new Promise((function (resolve, reject) {
          imageEl.addEventListener("load", (function (param) {
                  return resolve(imageEl);
                }));
          imageEl.addEventListener("error", (function (param) {
                  return reject({
                              RE_EXN_ID: "Invalid_argument",
                              _1: "Could not load image: " + imageSrc
                            });
                }));
          
        }));
  imageEl.src = imageSrc;
  return loadImagePromise;
}

var HtmlImageElement = {
  loadFromSrc: loadFromSrc
};

var Canvas = {};

var Context = {};

function make(src, spriteWidth) {
  return loadFromSrc(src).then(function (imageElement) {
              return Promise.resolve({
                          imageElement: imageElement,
                          spriteWidth: spriteWidth
                        });
            });
}

function drawSprite(atlas, ctx, atlasNumber, x, y) {
  ctx.drawImage(atlas.imageElement, Math.imul(atlasNumber, atlas.spriteWidth), 0, atlas.spriteWidth, atlas.spriteWidth, x, y, atlas.spriteWidth, atlas.spriteWidth);
  
}

var SpriteAtlas = {
  make: make,
  drawSprite: drawSprite
};

function make$1(atlas, numRows, numCols, tileSize, tiles) {
  return {
          atlas: atlas,
          numRows: numRows,
          numCols: numCols,
          tileSize: tileSize,
          tiles: tiles
        };
}

function getRowAndColumn(idx, tilemap) {
  var col = Caml_int32.mod_(idx, tilemap.numCols);
  var row = Js_math.floor(idx / tilemap.numCols);
  return [
          row,
          col
        ];
}

function render(ctx, tilemap) {
  return List.iteri((function (i, num) {
                var match = getRowAndColumn(i, tilemap);
                return drawSprite(tilemap.atlas, ctx, num, Math.imul(match[1], tilemap.tileSize), Math.imul(match[0], tilemap.tileSize));
              }), tilemap.tiles);
}

var TileMap = {
  make: make$1,
  getRowAndColumn: getRowAndColumn,
  render: render
};

function doWindowOnload(param) {
  var canvas = document.getElementById("demo");
  var ctx = canvas.getContext("2d");
  make("./tiles16.png", 16).then(function (atlas) {
          var tilemap = make$1(atlas, 2, 3, 16, {
                hd: 2,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 3,
                      tl: {
                        hd: 3,
                        tl: {
                          hd: 3,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              });
          render(ctx, tilemap);
          return Promise.resolve(undefined);
        }).catch(function (err) {
        console.log("Failure!", err);
        return Promise.resolve(undefined);
      });
  
}

window.addEventListener("load", doWindowOnload);

exports.$$Window = $$Window;
exports.$$Document = $$Document;
exports.HtmlImageElement = HtmlImageElement;
exports.Canvas = Canvas;
exports.Context = Context;
exports.SpriteAtlas = SpriteAtlas;
exports.TileMap = TileMap;
exports.doWindowOnload = doWindowOnload;
/*  Not a pure module */
